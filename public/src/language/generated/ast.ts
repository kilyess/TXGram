/******************************************************************************
 * This file was generated by langium-cli 3.2.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable */
import type { AstNode, Reference, ReferenceInfo, TypeMetaData } from 'langium';
import { AbstractAstReflection } from 'langium';

export const TxGramTerminals = {
    WHITESPACE: /[ \t\r\n]+/,
    IDENTIFIER: /[a-zA-Z_][\w]*/,
    TEXT_IN_QUOTES: /"(\\.|[^"\\])*"|'(\\.|[^'\\])*'/,
    NUMBER: /\d+/,
    MULTILINE_COMMENT: /\/\*[\s\S]*?\*\//,
    SINGLE_LINE_COMMENT: /\/\/[^\n\r]*/,
};

export type TxGramTerminalNames = keyof typeof TxGramTerminals;

export type TxGramKeywordNames = 
    | "("
    | ")"
    | ","
    | "-"
    | ".."
    | "..*"
    | ":"
    | "ActivityDiagram"
    | "ClassDiagram"
    | "SequenceDiagram"
    | "UseCaseDiagram"
    | "["
    | "]"
    | "action"
    | "actions:"
    | "allows_multiple_receivers:"
    | "allows_multiple_senders:"
    | "alternative"
    | "basic"
    | "begins"
    | "can_be_modified:"
    | "condition:"
    | "connection_type:"
    | "connections:"
    | "connects"
    | "contains"
    | "content:"
    | "controller"
    | "count:"
    | "data"
    | "data_flow"
    | "data_flows:"
    | "database"
    | "details:"
    | "distance:"
    | "downward"
    | "ends"
    | "extends"
    | "flow"
    | "flows:"
    | "found"
    | "from"
    | "from:"
    | "function"
    | "functions:"
    | "going_to:"
    | "group"
    | "includes"
    | "inherits"
    | "interface"
    | "leftward"
    | "list"
    | "lost"
    | "messages:"
    | "name:"
    | "no"
    | "object"
    | "objects:"
    | "one-way"
    | "optional_steps:"
    | "owns"
    | "parallel"
    | "participants:"
    | "people:"
    | "person"
    | "pointing:"
    | "priority:"
    | "process"
    | "properties:"
    | "property"
    | "queue"
    | "repeat"
    | "reply"
    | "request-response"
    | "rightward"
    | "role:"
    | "runs_once:"
    | "section"
    | "starting_from:"
    | "steps:"
    | "stop"
    | "system"
    | "systems:"
    | "task"
    | "tasks:"
    | "to"
    | "to:"
    | "type:"
    | "upward"
    | "what_it_does:"
    | "yes";

export type TxGramTokenNames = TxGramTerminalNames | TxGramKeywordNames;

export type Diagram = ActivityDiagram | ClassDiagram | SequenceDiagram | UseCaseDiagram;

export const Diagram = 'Diagram';

export function isDiagram(item: unknown): item is Diagram {
    return reflection.isInstance(item, Diagram);
}

export type Element = Actor | System | UseCase;

export const Element = 'Element';

export function isElement(item: unknown): item is Element {
    return reflection.isInstance(item, Element);
}

export interface ActivityDefinition extends AstNode {
    readonly $container: ActivityDiagram;
    readonly $type: 'ActivityDefinition';
    canModify: YesNo;
    dataFlows: Array<DataFlow>;
    flows: Array<Flow>;
    name: string;
    runOnce: YesNo;
    tasks: Array<Task>;
}

export const ActivityDefinition = 'ActivityDefinition';

export function isActivityDefinition(item: unknown): item is ActivityDefinition {
    return reflection.isInstance(item, ActivityDefinition);
}

export interface ActivityDiagram extends AstNode {
    readonly $type: 'ActivityDiagram';
    activities: Array<ActivityDefinition>;
    name: string;
}

export const ActivityDiagram = 'ActivityDiagram';

export function isActivityDiagram(item: unknown): item is ActivityDiagram {
    return reflection.isInstance(item, ActivityDiagram);
}

export interface Actor extends AstNode {
    readonly $container: UseCaseDiagram;
    readonly $type: 'Actor';
    name: string;
}

export const Actor = 'Actor';

export function isActor(item: unknown): item is Actor {
    return reflection.isInstance(item, Actor);
}

export interface ClassDefinition extends AstNode {
    readonly $container: ClassDiagram;
    readonly $type: 'ClassDefinition';
    attributes: Array<Property>;
    methods: Array<Func>;
    name: string;
}

export const ClassDefinition = 'ClassDefinition';

export function isClassDefinition(item: unknown): item is ClassDefinition {
    return reflection.isInstance(item, ClassDefinition);
}

export interface ClassDiagram extends AstNode {
    readonly $type: 'ClassDiagram';
    classes: Array<ClassDefinition>;
    name: string;
    relationships: Array<ClassRelationship>;
}

export const ClassDiagram = 'ClassDiagram';

export function isClassDiagram(item: unknown): item is ClassDiagram {
    return reflection.isInstance(item, ClassDiagram);
}

export interface ClassRelationship extends AstNode {
    readonly $container: ClassDiagram;
    readonly $type: 'ClassRelationship';
    childClass?: Reference<ClassDefinition>;
    fromClass?: Reference<ClassDefinition>;
    fromCount?: NumberRange;
    parentClass?: Reference<ClassDefinition>;
    toClass?: Reference<ClassDefinition>;
    toCount?: NumberRange;
}

export const ClassRelationship = 'ClassRelationship';

export function isClassRelationship(item: unknown): item is ClassRelationship {
    return reflection.isInstance(item, ClassRelationship);
}

export interface Connection extends AstNode {
    readonly $container: UseCaseDiagram;
    readonly $type: 'Connection';
    direction?: Direction;
    from: Reference<Element>;
    length?: string;
    to: Reference<Element>;
    type: ConnectionType;
}

export const Connection = 'Connection';

export function isConnection(item: unknown): item is Connection {
    return reflection.isInstance(item, Connection);
}

export interface ConnectionType extends AstNode {
    readonly $container: Connection;
    readonly $type: 'ConnectionType';
    basic?: 'basic';
    extends?: 'extends';
    includes?: 'includes';
}

export const ConnectionType = 'ConnectionType';

export function isConnectionType(item: unknown): item is ConnectionType {
    return reflection.isInstance(item, ConnectionType);
}

export interface DataFlow extends AstNode {
    readonly $container: ActivityDefinition;
    readonly $type: 'DataFlow';
    multiReceiver: YesNo;
    multiSender: YesNo;
    name: string;
    source: Reference<Task>;
    target: Reference<Task>;
}

export const DataFlow = 'DataFlow';

export function isDataFlow(item: unknown): item is DataFlow {
    return reflection.isInstance(item, DataFlow);
}

export interface Direction extends AstNode {
    readonly $container: Connection;
    readonly $type: 'Direction';
    downward?: 'downward';
    leftward?: 'leftward';
    rightward?: 'rightward';
    upward?: 'upward';
}

export const Direction = 'Direction';

export function isDirection(item: unknown): item is Direction {
    return reflection.isInstance(item, Direction);
}

export interface ExtensionPoint extends AstNode {
    readonly $container: UseCase;
    readonly $type: 'ExtensionPoint';
    description: string;
}

export const ExtensionPoint = 'ExtensionPoint';

export function isExtensionPoint(item: unknown): item is ExtensionPoint {
    return reflection.isInstance(item, ExtensionPoint);
}

export interface Flow extends AstNode {
    readonly $container: ActivityDefinition;
    readonly $type: 'Flow';
    condition?: string;
    count?: NumberRange;
    name: string;
    source: Reference<Task>;
    target: Reference<Task>;
    weight?: string;
}

export const Flow = 'Flow';

export function isFlow(item: unknown): item is Flow {
    return reflection.isInstance(item, Flow);
}

export interface Func extends AstNode {
    readonly $container: ClassDefinition;
    readonly $type: 'Func';
    name: string;
    parameters: Array<Parameter>;
    returnType?: string;
}

export const Func = 'Func';

export function isFunc(item: unknown): item is Func {
    return reflection.isInstance(item, Func);
}

export interface GroupSection extends AstNode {
    readonly $container: MessageGroup;
    readonly $type: 'GroupSection';
    description: string;
    interactions: Array<Message | MessageGroup | TaskExecution>;
}

export const GroupSection = 'GroupSection';

export function isGroupSection(item: unknown): item is GroupSection {
    return reflection.isInstance(item, GroupSection);
}

export interface GroupType extends AstNode {
    readonly $container: MessageGroup;
    readonly $type: 'GroupType';
    alternative?: 'alternative';
    parallel?: 'parallel';
    repeat?: 'repeat';
    stop?: 'stop';
}

export const GroupType = 'GroupType';

export function isGroupType(item: unknown): item is GroupType {
    return reflection.isInstance(item, GroupType);
}

export interface Message extends AstNode {
    readonly $container: GroupSection | SequenceDiagram;
    readonly $type: 'Message';
    content?: string;
    messageType: MessageType;
    receiver: Reference<Participant>;
    sender: Reference<Participant>;
}

export const Message = 'Message';

export function isMessage(item: unknown): item is Message {
    return reflection.isInstance(item, Message);
}

export interface MessageGroup extends AstNode {
    readonly $container: GroupSection | SequenceDiagram;
    readonly $type: 'MessageGroup';
    sections: Array<GroupSection>;
    type: GroupType;
}

export const MessageGroup = 'MessageGroup';

export function isMessageGroup(item: unknown): item is MessageGroup {
    return reflection.isInstance(item, MessageGroup);
}

export interface MessageType extends AstNode {
    readonly $container: Message;
    readonly $type: 'MessageType';
    found?: 'found';
    lost?: 'lost';
    oneway?: 'one-way';
    reply?: 'reply';
    requestresponse?: 'request-response';
}

export const MessageType = 'MessageType';

export function isMessageType(item: unknown): item is MessageType {
    return reflection.isInstance(item, MessageType);
}

export interface NumberRange extends AstNode {
    readonly $container: ClassRelationship | Flow;
    readonly $type: 'NumberRange';
    maximum?: string;
    minimum: string;
}

export const NumberRange = 'NumberRange';

export function isNumberRange(item: unknown): item is NumberRange {
    return reflection.isInstance(item, NumberRange);
}

export interface Parameter extends AstNode {
    readonly $container: Func;
    readonly $type: 'Parameter';
    dataType: string;
    name: string;
}

export const Parameter = 'Parameter';

export function isParameter(item: unknown): item is Parameter {
    return reflection.isInstance(item, Parameter);
}

export interface Participant extends AstNode {
    readonly $container: SequenceDiagram;
    readonly $type: 'Participant';
    name: string;
    role: ParticipantRole;
}

export const Participant = 'Participant';

export function isParticipant(item: unknown): item is Participant {
    return reflection.isInstance(item, Participant);
}

export interface ParticipantRole extends AstNode {
    readonly $container: Participant;
    readonly $type: 'ParticipantRole';
    controller?: 'controller';
    data?: 'data';
    database?: 'database';
    interface?: 'interface';
    list?: 'list';
    person?: 'person';
    queue?: 'queue';
    system?: 'system';
}

export const ParticipantRole = 'ParticipantRole';

export function isParticipantRole(item: unknown): item is ParticipantRole {
    return reflection.isInstance(item, ParticipantRole);
}

export interface Property extends AstNode {
    readonly $container: ClassDefinition;
    readonly $type: 'Property';
    dataType: string;
    name: string;
}

export const Property = 'Property';

export function isProperty(item: unknown): item is Property {
    return reflection.isInstance(item, Property);
}

export interface SequenceDiagram extends AstNode {
    readonly $type: 'SequenceDiagram';
    interactions: Array<Message | MessageGroup | TaskExecution>;
    name: string;
    participants: Array<Participant>;
}

export const SequenceDiagram = 'SequenceDiagram';

export function isSequenceDiagram(item: unknown): item is SequenceDiagram {
    return reflection.isInstance(item, SequenceDiagram);
}

export interface System extends AstNode {
    readonly $container: UseCaseDiagram;
    readonly $type: 'System';
    name: string;
}

export const System = 'System';

export function isSystem(item: unknown): item is System {
    return reflection.isInstance(item, System);
}

export interface Task extends AstNode {
    readonly $container: ActivityDefinition;
    readonly $type: 'Task';
    description: string;
    name: string;
}

export const Task = 'Task';

export function isTask(item: unknown): item is Task {
    return reflection.isInstance(item, Task);
}

export interface TaskExecution extends AstNode {
    readonly $container: GroupSection | SequenceDiagram;
    readonly $type: 'TaskExecution';
    participant: Reference<Participant>;
    status: 'begins' | 'ends';
}

export const TaskExecution = 'TaskExecution';

export function isTaskExecution(item: unknown): item is TaskExecution {
    return reflection.isInstance(item, TaskExecution);
}

export interface UseCase extends AstNode {
    readonly $container: UseCaseDiagram;
    readonly $type: 'UseCase';
    description: string;
    extensionPoints: Array<ExtensionPoint>;
    name: string;
}

export const UseCase = 'UseCase';

export function isUseCase(item: unknown): item is UseCase {
    return reflection.isInstance(item, UseCase);
}

export interface UseCaseDiagram extends AstNode {
    readonly $type: 'UseCaseDiagram';
    actors: Array<Actor>;
    name: string;
    rectangles: Array<System>;
    relations: Array<Connection>;
    useCases: Array<UseCase>;
}

export const UseCaseDiagram = 'UseCaseDiagram';

export function isUseCaseDiagram(item: unknown): item is UseCaseDiagram {
    return reflection.isInstance(item, UseCaseDiagram);
}

export interface YesNo extends AstNode {
    readonly $container: ActivityDefinition | DataFlow;
    readonly $type: 'YesNo';
    no?: 'no';
    yes?: 'yes';
}

export const YesNo = 'YesNo';

export function isYesNo(item: unknown): item is YesNo {
    return reflection.isInstance(item, YesNo);
}

export type TxGramAstType = {
    ActivityDefinition: ActivityDefinition
    ActivityDiagram: ActivityDiagram
    Actor: Actor
    ClassDefinition: ClassDefinition
    ClassDiagram: ClassDiagram
    ClassRelationship: ClassRelationship
    Connection: Connection
    ConnectionType: ConnectionType
    DataFlow: DataFlow
    Diagram: Diagram
    Direction: Direction
    Element: Element
    ExtensionPoint: ExtensionPoint
    Flow: Flow
    Func: Func
    GroupSection: GroupSection
    GroupType: GroupType
    Message: Message
    MessageGroup: MessageGroup
    MessageType: MessageType
    NumberRange: NumberRange
    Parameter: Parameter
    Participant: Participant
    ParticipantRole: ParticipantRole
    Property: Property
    SequenceDiagram: SequenceDiagram
    System: System
    Task: Task
    TaskExecution: TaskExecution
    UseCase: UseCase
    UseCaseDiagram: UseCaseDiagram
    YesNo: YesNo
}

export class TxGramAstReflection extends AbstractAstReflection {

    getAllTypes(): string[] {
        return [ActivityDefinition, ActivityDiagram, Actor, ClassDefinition, ClassDiagram, ClassRelationship, Connection, ConnectionType, DataFlow, Diagram, Direction, Element, ExtensionPoint, Flow, Func, GroupSection, GroupType, Message, MessageGroup, MessageType, NumberRange, Parameter, Participant, ParticipantRole, Property, SequenceDiagram, System, Task, TaskExecution, UseCase, UseCaseDiagram, YesNo];
    }

    protected override computeIsSubtype(subtype: string, supertype: string): boolean {
        switch (subtype) {
            case ActivityDiagram:
            case ClassDiagram:
            case SequenceDiagram:
            case UseCaseDiagram: {
                return this.isSubtype(Diagram, supertype);
            }
            case Actor:
            case System:
            case UseCase: {
                return this.isSubtype(Element, supertype);
            }
            default: {
                return false;
            }
        }
    }

    getReferenceType(refInfo: ReferenceInfo): string {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
            case 'ClassRelationship:childClass':
            case 'ClassRelationship:fromClass':
            case 'ClassRelationship:parentClass':
            case 'ClassRelationship:toClass': {
                return ClassDefinition;
            }
            case 'Connection:from':
            case 'Connection:to': {
                return Element;
            }
            case 'DataFlow:source':
            case 'DataFlow:target':
            case 'Flow:source':
            case 'Flow:target': {
                return Task;
            }
            case 'Message:receiver':
            case 'Message:sender':
            case 'TaskExecution:participant': {
                return Participant;
            }
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }

    getTypeMetaData(type: string): TypeMetaData {
        switch (type) {
            case ActivityDefinition: {
                return {
                    name: ActivityDefinition,
                    properties: [
                        { name: 'canModify' },
                        { name: 'dataFlows', defaultValue: [] },
                        { name: 'flows', defaultValue: [] },
                        { name: 'name' },
                        { name: 'runOnce' },
                        { name: 'tasks', defaultValue: [] }
                    ]
                };
            }
            case ActivityDiagram: {
                return {
                    name: ActivityDiagram,
                    properties: [
                        { name: 'activities', defaultValue: [] },
                        { name: 'name' }
                    ]
                };
            }
            case Actor: {
                return {
                    name: Actor,
                    properties: [
                        { name: 'name' }
                    ]
                };
            }
            case ClassDefinition: {
                return {
                    name: ClassDefinition,
                    properties: [
                        { name: 'attributes', defaultValue: [] },
                        { name: 'methods', defaultValue: [] },
                        { name: 'name' }
                    ]
                };
            }
            case ClassDiagram: {
                return {
                    name: ClassDiagram,
                    properties: [
                        { name: 'classes', defaultValue: [] },
                        { name: 'name' },
                        { name: 'relationships', defaultValue: [] }
                    ]
                };
            }
            case ClassRelationship: {
                return {
                    name: ClassRelationship,
                    properties: [
                        { name: 'childClass' },
                        { name: 'fromClass' },
                        { name: 'fromCount' },
                        { name: 'parentClass' },
                        { name: 'toClass' },
                        { name: 'toCount' }
                    ]
                };
            }
            case Connection: {
                return {
                    name: Connection,
                    properties: [
                        { name: 'direction' },
                        { name: 'from' },
                        { name: 'length' },
                        { name: 'to' },
                        { name: 'type' }
                    ]
                };
            }
            case ConnectionType: {
                return {
                    name: ConnectionType,
                    properties: [
                        { name: 'basic' },
                        { name: 'extends' },
                        { name: 'includes' }
                    ]
                };
            }
            case DataFlow: {
                return {
                    name: DataFlow,
                    properties: [
                        { name: 'multiReceiver' },
                        { name: 'multiSender' },
                        { name: 'name' },
                        { name: 'source' },
                        { name: 'target' }
                    ]
                };
            }
            case Direction: {
                return {
                    name: Direction,
                    properties: [
                        { name: 'downward' },
                        { name: 'leftward' },
                        { name: 'rightward' },
                        { name: 'upward' }
                    ]
                };
            }
            case ExtensionPoint: {
                return {
                    name: ExtensionPoint,
                    properties: [
                        { name: 'description' }
                    ]
                };
            }
            case Flow: {
                return {
                    name: Flow,
                    properties: [
                        { name: 'condition' },
                        { name: 'count' },
                        { name: 'name' },
                        { name: 'source' },
                        { name: 'target' },
                        { name: 'weight' }
                    ]
                };
            }
            case Func: {
                return {
                    name: Func,
                    properties: [
                        { name: 'name' },
                        { name: 'parameters', defaultValue: [] },
                        { name: 'returnType' }
                    ]
                };
            }
            case GroupSection: {
                return {
                    name: GroupSection,
                    properties: [
                        { name: 'description' },
                        { name: 'interactions', defaultValue: [] }
                    ]
                };
            }
            case GroupType: {
                return {
                    name: GroupType,
                    properties: [
                        { name: 'alternative' },
                        { name: 'parallel' },
                        { name: 'repeat' },
                        { name: 'stop' }
                    ]
                };
            }
            case Message: {
                return {
                    name: Message,
                    properties: [
                        { name: 'content' },
                        { name: 'messageType' },
                        { name: 'receiver' },
                        { name: 'sender' }
                    ]
                };
            }
            case MessageGroup: {
                return {
                    name: MessageGroup,
                    properties: [
                        { name: 'sections', defaultValue: [] },
                        { name: 'type' }
                    ]
                };
            }
            case MessageType: {
                return {
                    name: MessageType,
                    properties: [
                        { name: 'found' },
                        { name: 'lost' },
                        { name: 'oneway' },
                        { name: 'reply' },
                        { name: 'requestresponse' }
                    ]
                };
            }
            case NumberRange: {
                return {
                    name: NumberRange,
                    properties: [
                        { name: 'maximum' },
                        { name: 'minimum' }
                    ]
                };
            }
            case Parameter: {
                return {
                    name: Parameter,
                    properties: [
                        { name: 'dataType' },
                        { name: 'name' }
                    ]
                };
            }
            case Participant: {
                return {
                    name: Participant,
                    properties: [
                        { name: 'name' },
                        { name: 'role' }
                    ]
                };
            }
            case ParticipantRole: {
                return {
                    name: ParticipantRole,
                    properties: [
                        { name: 'controller' },
                        { name: 'data' },
                        { name: 'database' },
                        { name: 'interface' },
                        { name: 'list' },
                        { name: 'person' },
                        { name: 'queue' },
                        { name: 'system' }
                    ]
                };
            }
            case Property: {
                return {
                    name: Property,
                    properties: [
                        { name: 'dataType' },
                        { name: 'name' }
                    ]
                };
            }
            case SequenceDiagram: {
                return {
                    name: SequenceDiagram,
                    properties: [
                        { name: 'interactions', defaultValue: [] },
                        { name: 'name' },
                        { name: 'participants', defaultValue: [] }
                    ]
                };
            }
            case System: {
                return {
                    name: System,
                    properties: [
                        { name: 'name' }
                    ]
                };
            }
            case Task: {
                return {
                    name: Task,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case TaskExecution: {
                return {
                    name: TaskExecution,
                    properties: [
                        { name: 'participant' },
                        { name: 'status' }
                    ]
                };
            }
            case UseCase: {
                return {
                    name: UseCase,
                    properties: [
                        { name: 'description' },
                        { name: 'extensionPoints', defaultValue: [] },
                        { name: 'name' }
                    ]
                };
            }
            case UseCaseDiagram: {
                return {
                    name: UseCaseDiagram,
                    properties: [
                        { name: 'actors', defaultValue: [] },
                        { name: 'name' },
                        { name: 'rectangles', defaultValue: [] },
                        { name: 'relations', defaultValue: [] },
                        { name: 'useCases', defaultValue: [] }
                    ]
                };
            }
            case YesNo: {
                return {
                    name: YesNo,
                    properties: [
                        { name: 'no' },
                        { name: 'yes' }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    properties: []
                };
            }
        }
    }
}

export const reflection = new TxGramAstReflection();
